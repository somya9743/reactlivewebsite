{"version":3,"sources":["TodoForm.js","Todos.js","App.js","index.js"],"names":["TodoForm","addTodo","useState","value","setvalue","className","onSubmit","e","preventDefault","type","placeholder","onChange","target","Todo","todo","index","markComplete","editTitle","style","textDecoration","isCompleted","name","id","text","Todos","todos","map","App","setTodos","newTodos","title","ReactDOM","render","document","getElementById"],"mappings":"wMA4BeA,EA1BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,QACf,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,sBAAKC,UAAW,YAAhB,UACI,qBAAKA,UAAU,wBAAf,8BACA,uBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACGL,IAELF,EAAQE,GACRC,EAAS,MAMyBC,UAAW,2BAAzC,UACI,uBAAOA,UAAW,yBAA0BI,KAAM,OAAQC,YAAa,aAAcP,MAAOA,EAAOQ,SAhB1F,SAACJ,GAClBH,EAASG,EAAEK,OAAOT,UAgBV,uBAAOE,UAAW,kDAAmDI,KAAM,SAAUN,MAAO,eCRtGU,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,aAAf,EAA6BC,UAA7B,OACT,qBAAKZ,UAAU,OAAf,SACI,oBAAGa,MAAO,CAACC,eAAiBL,EAAKM,YAAc,eAAiB,IAAhE,UACI,uBAAOX,KAAM,WAAYE,SAAU,kBAAMK,EAAaD,IAAQM,KAAM,YAAaC,GAAIR,EAAKQ,KAAM,IAC/FR,EAAKS,WAKHC,EArBD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAOT,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,UACjC,OACI,qBAAKZ,UAAW,YAAhB,SAEYoB,EAAMC,KAAI,SAACZ,EAAMC,GAAP,OACN,cAAC,EAAD,CAAMD,KAAMA,EAAkBC,MAAOA,EAAOC,aAAcA,EAAcC,UAAWA,GAA5DF,SC+ChCY,MAjDf,WACI,MAA0BzB,mBAAS,CAC/B,CACIoB,GAAG,EACHC,KAAM,yBACNH,aAAa,GAEjB,CACIE,GAAG,EACHC,KAAM,mBACNH,aAAa,GAEjB,CACIE,GAAG,EACHC,KAAM,OACNH,aAAa,KAdrB,mBAAOK,EAAP,KAAcG,EAAd,KAkCA,OACE,qBAAKvB,UAAU,mBAAf,SACI,qBAAKA,UAAU,0BAAf,SACI,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,WAAf,UACI,cAAC,EAAD,CAAUJ,QArBZ,SAACa,GACbc,EAAS,GAAD,mBAAKH,GAAL,CAAY,CAACF,KAAKT,SAqBZ,cAAC,EAAD,CAAOW,MAAOA,EAAOT,aAlBlB,SAACD,GAClB,IAAMc,EAAQ,YAAOJ,GACrBI,EAASd,GAAOK,aAAeS,EAASd,GAAOK,YAC/CQ,EAASC,IAesDZ,UAZjD,SAACF,EAAOe,GACtB,IAAMD,EAAQ,YAAOJ,GACrBI,EAASd,GAAOQ,KAAOO,EACvBF,EAASC,gBChCjBE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.882a02fe.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nconst TodoForm = ({addTodo}) =>{\r\n    const [value, setvalue] = useState('');\r\n\r\n    const handleChange = (e) => {   //to handle change in form input (when user is typing)\r\n        setvalue(e.target.value);         //e.target gives the value of current value the user is typing\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();     //to prevent DOM from reloading the page\r\n        if (!value)             //if user submits empty form, do nothing\r\n            return;\r\n        addTodo(value);\r\n        setvalue('');           //set the value to be empty again to get ready for next input\r\n    };\r\n\r\n    return(\r\n        <div className={\"container\"}>\r\n            <div className=\"app-title text-center\">Another ToDo App</div>\r\n            <form onSubmit={handleSubmit} className={\"form-group row todo-form\"}>\r\n                <input className={\"form-control col-md-8 \"} type={\"text\"} placeholder={\"Add a ToDo\"} value={value} onChange={handleChange}/>\r\n                <input className={\"form-control btn-primary col-md-4 submit-button\"} type={\"submit\"} value={\"Add\"}/>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoForm;","import React from 'react';\r\n\r\nconst Todos = ({todos, markComplete, editTitle}) => {\r\n    return (\r\n        <div className={\"todo-list\"}>\r\n                {\r\n                    todos.map((todo, index) => (\r\n                        <Todo todo={todo} key={index} index={index} markComplete={markComplete} editTitle={editTitle}/>\r\n                    ))\r\n                }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Todo = ({todo, index, markComplete, editTitle}) =>(\r\n    <div className=\"todo\">\r\n        <p style={{textDecoration : todo.isCompleted ? \"line-through\" : \"\"}}>\r\n            <input type={\"checkbox\"} onChange={() => markComplete(index)} name={\"completed\"} id={todo.id}/>{' '}\r\n            {todo.text}\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default Todos;","import React, {useState} from 'react';\nimport './App.css';\nimport TodoForm from \"./TodoForm\";\nimport Todos from \"./Todos\";\n\nfunction App() {\n    const [todos, setTodos] = useState([\n        {\n            id:1,\n            text: \"Write a new blog post.\",\n            isCompleted: false\n        },\n        {\n            id:2,\n            text: \"Pick up laundry.\",\n            isCompleted: false\n        },\n        {\n            id:3,\n            text: \"Die.\",\n            isCompleted: false\n        }\n    ]);\n\n    const addTodo = (todo) => {\n        setTodos([...todos, {text:todo}] );\n    };\n\n    const markComplete = (index) => {\n        const newTodos = [...todos];\n        newTodos[index].isCompleted = !newTodos[index].isCompleted;\n        setTodos(newTodos);\n    };\n\n    const editTitle = (index, title) => {\n        const newTodos = [...todos];\n        newTodos[index].text = title;\n        setTodos(newTodos);\n    };\n\n    return (\n      <div className=\"parent-container\">\n          <div className=\"container top-container\">\n              <div className=\"app\">\n                  <div className=\"todoform\">\n                      <TodoForm addTodo={addTodo} />\n                      <Todos todos={todos} markComplete={markComplete} editTitle={editTitle}/>\n                  </div>\n              </div>\n          </div>\n      </div>\n    );\n}\n\nexport default App;","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}